name: Build Docker Image

on:
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=schedule
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        platforms: linux/amd64,linux/arm64
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: |
          org.opencontainers.image.title=VMGoat
          org.opencontainers.image.description=VMGoat is a tool for deploying security scenarios in virtual machines.
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false
      env:
        SOURCE_DATE_EPOCH: 0

    - name: Update release with Docker image information
      if: github.event_name == 'release'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Get the current release body
        RELEASE_BODY=$(gh api repos/${{ github.repository }}/releases/${{ github.event.release.id }} --jq .body)
        
        # Create temporary file for Docker info
        DOCKER_INFO=$(mktemp)
        
        # Write Docker information to temp file
        {
          echo
          echo "## Docker Images"
          echo
          echo "The following images are now available:"
          echo '```bash'
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            echo "docker pull $tag"
          done
          echo '```'
          echo
          echo "Supported architectures: linux/amd64, linux/arm64"
        } > "$DOCKER_INFO"
        
        # Combine existing release body with Docker information
        # Ensure there's a blank line between existing content and new content
        if [ -n "$RELEASE_BODY" ]; then
          FULL_BODY="${RELEASE_BODY}\n\n$(cat "$DOCKER_INFO")"
        else
          FULL_BODY="$(cat "$DOCKER_INFO")"
        fi
        
        # Update the release
        gh api \
          --method PATCH \
          repos/${{ github.repository }}/releases/${{ github.event.release.id }} \
          -f body="$FULL_BODY"
        
        rm -f "$DOCKER_INFO"
